buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' } //Parchment (Name mappings)
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
//apply from: 'https://raw.githubusercontent.com/SizableShrimp/ForgeUpdatesRemapper/main/remapper.gradle'

version = "${mod_version}"
group = 'com.direwolf20.laserio' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'laserio'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'official', version: "${mc_version}"
    mappings channel: 'parchment', version: "2022.08.14-1.19.2"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'laserio'

            //Patchouli
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                laserio {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'laserio'
            //Patchouli
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                laserio {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'laserio'

            mods {
                laserio {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'laserio', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            //Patchouli
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                laserio {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    flatDir {
        dirs 'includedMods/'
    }

    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven { // TOP
        url "https://cursemaven.com"
    }

    maven { //Patchouli
        url 'https://maven.blamejared.com'
    }

    maven { url = 'https://modmaven.dev/' } // mek
    maven { url = "https://www.cursemaven.com" } // curse mods
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    //JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-1.19.2-forge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.2-forge:${jei_version}")

    //Patchouli
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    //Other mods for dev environment
    runtimeOnly fg.deobf("mekanism:Mekanism:${mekanism_version}")

    /*runtimeOnly fg.deobf("curse.maven:functional-storage-556861:3794763")
    runtimeOnly fg.deobf("curse.maven:titanium-287342:3819942")

    runtimeOnly fg.deobf("curse.maven:mcjtylib-233105:3757792")
    runtimeOnly fg.deobf("curse.maven:rftools-utility-342466:3805799")
    runtimeOnly fg.deobf("curse.maven:rftools-base-326041:3711541")
    runtimeOnly fg.deobf("curse.maven:rftools-power-290209:3783991")

    //runtimeOnly fg.deobf("curse.maven:carry-on-274259:3674344")
    runtimeOnly fg.deobf("curse.maven:create-328085:3737418")
    runtimeOnly fg.deobf("curse.maven:flywheel-486392:3737402")
    //runtimeOnly fg.deobf("curse.maven:inventory-sorter-240633:3543137") // already on the forge maven
    runtimeOnly fg.deobf("curse.maven:tinkers-construct-74072:3784732")
    runtimeOnly fg.deobf("curse.maven:mantle-74924:3784500")

    runtimeOnly fg.deobf("curse.maven:thermal-expansion-69163:3803489")
    runtimeOnly fg.deobf("curse.maven:thermal-foundation-222880:3803495")
    runtimeOnly fg.deobf("curse.maven:cofh-core-69162:3803484")

    runtimeOnly fg.deobf("curse.maven:flux-networks-248020:3842346")
    runtimeOnly fg.deobf("curse.maven:applied-energistics-2-223794:3836504")

    //runtimeOnly fg.deobf("curse.maven:pneumaticcraft-repressurized-281849:3913972")
    runtimeOnly fg.deobf("curse.maven:modular-routers-250294:3776175")

    runtimeOnly fg.deobf("curse.maven:industrial-foregoing-266515:3848558")

    //MouseTweaks
    //runtimeOnly fg.deobf("curse.maven:mouse-tweaks-60089:3578801")

    //Trash Cans
    //runtimeOnly fg.deobf("ignored:supermartijn642corelib:1.0.18") // already on the forge maven
    //runtimeOnly fg.deobf("curse.maven:trash-cans-394535:3773710") // already on the forge maven
    //TOP
    //implementation fg.deobf("curse.maven:the-one-probe-245211:3550084")

    //Spark
    runtimeOnly fg.deobf("curse.maven:spark-361579:3767286")

    runtimeOnly fg.deobf("curse.maven:refined-storage-243076:3712882")*/
    //runtimeOnly fg.deobf("curse.maven:shetiphiancore-71738:3765383")
    //runtimeOnly fg.deobf("curse.maven:enderchests-363535:3765400")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "laserio",
                "Specification-Vendor"    : "direwolf20",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "direwolf20",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
